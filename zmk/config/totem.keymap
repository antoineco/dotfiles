#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <dt-bindings/zmk/pointing.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"

#define BASE 0
#define LOWR 1
#define UPPR 2
#define ADJU 3

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5 LH0 LH1 LH2
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5 RH0 RH1 RH2

#define MAKE_HRM(NAME, DISP, TRIGGER_POS)                  \
  ZMK_HOLD_TAP(NAME, display-name = DISP;                  \
               bindings = <&kp>, <&kp>;                    \
               flavor = "balanced";                        \
               require-prior-idle-ms = <125>;              \
               tapping-term-ms = <280>;                    \
               quick-tap-ms = <175>;                       \
               hold-trigger-key-positions = <TRIGGER_POS>; \
               hold-trigger-on-release;)

MAKE_HRM(hml, "Home Row Mod L", KEYS_R)
MAKE_HRM(hmr, "Home Row Mod R", KEYS_L)

#define MAKE_LAYER_TAP(NAME, DISP, BINDING) \
  ZMK_HOLD_TAP(NAME, display-name = DISP;   \
               bindings = <&mo>, <BINDING>; \
               flavor = "balanced";         \
               tapping-term-ms = <280>;     \
               quick-tap-ms = <175>;)

MAKE_LAYER_TAP(ltt, "Layer-Tap", &kp)
MAKE_LAYER_TAP(ltb, "Layer-Tap Backspace", &bspcdel)

#define MAKE_MORPH(NAME, MOD, BINDING1, BINDING2)   \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_##MOD)>;         \
                bindings = <BINDING1>, <BINDING2>;)

MAKE_MORPH(sqtundr, LSFT, &kp SQT, &kp UNDER)
MAKE_MORPH(dotcolon, LSFT, &kp DOT, &kp COLON)
MAKE_MORPH(mindqt, LSFT, &kp MINUS, &kp DQT)
MAKE_MORPH(commsemi, LSFT, &kp COMMA, &kp SEMI)
MAKE_MORPH(bspcdel, RSFT, &kp BSPC, &kp DEL)

#define MAKE_COMBO_FAST(NAME, BINDINGS, KEYPOS)    \
  ZMK_COMBO(NAME, BINDINGS, KEYPOS, BASE, 18, 125)

MAKE_COMBO_FAST(tab, &kp TAB, LT2 LT3)
MAKE_COMBO_FAST(enter, &kp ENTER, RT2 RT3)
ZMK_COMBO(spc_lower, &kp SPACE, LT2 LT3, LOWR)
ZMK_COMBO(bspc_upper, &kp BSPC, RT2 RT3, UPPR)
ZMK_COMBO(caps_word, &caps_word, LM1 RM1, BASE)

#define MAKE_BT_TAP_DANCE(PROFILE)                                                           \
  ZMK_TAP_DANCE(bt##PROFILE, display-name = ZMK_HELPER_STRINGIFY(Bluetooth Profile PROFILE); \
                bindings = <&macro_bt##PROFILE>, <&bt BT_DISC PROFILE>;)                     \
  ZMK_MACRO(macro_bt##PROFILE, bindings = <&out OUT_BLE>, <&bt BT_SEL PROFILE>;)

MAKE_BT_TAP_DANCE(0)
MAKE_BT_TAP_DANCE(1)
MAKE_BT_TAP_DANCE(2)

ZMK_CONDITIONAL_LAYER(adjust, LOWR UPPR, ADJU)

/ {
    keymap {
        compatible = "zmk,keymap";

        /* Base (default), Graphite alphas
         */
        base_layer {
            display-name = "Base";
            bindings = <
                             &kp B        &kp L        &kp D        &kp W        &kp Z                                    &sqtundr     &kp F        &kp O        &kp U        &kp J
                             &hml LCTRL N &hml LALT R  &hml LGUI T  &hml LSHFT S &kp G                                    &kp Y        &hmr RSHFT H &hmr RGUI A  &hmr RALT E  &hmr RCTRL I
                &kp ESC      &kp Q        &kp X        &kp M        &kp C        &kp V                                    &kp K        &kp P        &dotcolon    &mindqt      &commsemi    &kp FSLH
                                                                    &none        &none        &ltb 2 BSPC    &ltt 1 SPACE &none        &none
            >;
        };

        /* Numbers, Navigation
         */
        lower_layer {
            display-name = "Lower";
            bindings = <
                             &kp KP_MINUS &kp N7       &kp N8       &kp N9       &kp KP_PLUS                              &kp PRCNT    &kp LBKT     &kp LPAR     &kp RPAR     &kp RBKT
                             &kp N0       &kp N4       &kp N5       &kp N6       &kp KP_EQUAL                             &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT    &kp KP_DOT
                &kp COLON    &kp KP_SLASH &kp N1       &kp N2       &kp N3       &kp KP_ASTERISK                          &kp HOME     &kp PG_DN    &kp PG_UP    &kp END      &kp X        &kp B
                                                                    &trans       &trans       &trans         &none        &trans       &trans
            >;
        };

        /* Symbols
         */
        upper_layer {
            display-name = "Upper";
            bindings = <
                             &kp TILDE    &kp DOT      &kp ASTRK    &kp AMPS     &kp AT                                   &kp PRCNT    &kp LBKT     &kp LPAR     &kp RPAR     &kp RBKT
                             &kp LT       &kp PIPE     &kp MINUS    &kp GT       &kp FSLH                                 &kp EXCL     &kp COMMA    &kp LBRC     &kp RBRC     &kp SEMI
                &kp UNDER    &kp GRAVE    &kp SQT      &kp DQT      &kp PLUS     &kp BSLH                                 &kp HASH     &kp CARET    &kp COLON    &kp EQUAL    &kp DLLR     &kp QMARK
                                                                    &trans       &trans       &none          &trans       &trans       &trans
            >;
        };

        /* Media, Mouse, Keyboard control
         */
        adjust_layer {
            display-name = "Adjust";
            bindings = <
                             &bt0         &bt1         &bt2         &out OUT_USB &bt BT_CLR                               &none        &none        &none        &none        &none
                             &none        &none        &mkp MB2     &mkp MB1     &none                                    &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT &none
                &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &kp C_PREV   &kp C_PP     &kp C_NEXT                               &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP &msc SCRL_RIGHT &none &none
                                                                    &none        &none        &none          &none        &none        &none
            >;
        };
    };
};
