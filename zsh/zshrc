#
# User configuration sourced by interactive shells
#

# Editor
# In absence of explicit zle configuration (e.g. via bindkey), Zsh sets its key bindings based on the value of $EDITOR.
# We set it first to be on the safe side.
export EDITOR=nvc
export VISUAL=nvc

# Fpath mangling for user functions
fpath=(${HOME}/.local/share/zsh/site-functions $fpath)

# Homebrew
if [[ ${OSTYPE} == darwin* ]] && [[ -x /opt/homebrew/bin/brew ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
  fpath=("$(brew --prefix)/share/zsh/site-functions" $fpath)

  # https://stackoverflow.com/a/55445034/4716370
  brew_leaves() {
    brew deps --formula --for-each $(brew leaves) \
      | sed "s/^.*:/$(tput setaf 4)&$(tput sgr0)/"
  }
fi


# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
#zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key

#
# kube-ps1
#

_kube_ps1_cluster_short() {
  # shorten GKE and EKS context formats
  print ${1/(gke_*_|arn:aws:eks:*\/)(#b)(*)/${match[1]}}
}
KUBE_PS1_CLUSTER_FUNCTION=_kube_ps1_cluster_short

KUBE_PS1_SEPARATOR=' '
KUBE_PS1_PREFIX=''
KUBE_PS1_SUFFIX=''

# ------------------------------
# Custom post-init configuration
# ------------------------------

# GPG
GPG_TTY="$(tty)"
export GPG_TTY

# Path mangling for user executables (Python, etc.)
path=(${HOME}/.local/bin $path)

# Go
export GOPATH=${HOME}/go
path=(${HOME}/.local/share/go/bin ${GOPATH}/bin $path)

# fzf
# Generate with `${FZF_BASE}/install --key-bindings --completion --no-update-rc --no-bash --no-fish`
[[ -s ${HOME}/.fzf.zsh ]] && . ${HOME}/.fzf.zsh

# Node
[[ -s ${HOME}/.nvm/nvm.sh ]] && . ${HOME}/.nvm/nvm.sh

# Rust
[[ -s ${HOME}/.cargo/env ]] && . ${HOME}/.cargo/env

# Prompt
_kube_ps1_to_rprompt() {
  RPROMPT=$(kube_ps1)
}
autoload -U add-zsh-hook
add-zsh-hook precmd _kube_ps1_to_rprompt

# Allow command line editing in an external editor in the "vicmd" keymap.
# Zim's "input" module already enables this in the default keymap ("viins").
bindkey -M vicmd "${key_info[Control]}x${key_info[Control]}e" edit-command-line

# Commands completion
(( $+commands[kubectl] )) && [[ -s ${HOME}/.kube/config ]] && . <(kubectl completion zsh) && compdef _kubectl kubectl
(( $+commands[ko] ))      && . <(ko completion zsh) && compdef _ko ko
(( $+commands[limactl] )) && . <(limactl completion zsh) && compdef _limactl limactl
[[ -s ${NVM_DIR}/bash_completion ]] && . ${NVM_DIR}/bash_completion

# Aliases
alias K='kubectl'
alias Kn='kubectl -n'
alias Knk='kubectl -n kube-system'
(( $+commands[kitty] )) && alias ssh='kitty +kitten ssh'
if (( $+commands[lima] )); then
  ko.lima() { lima KO_DOCKER_REPO='kind.local' KIND_CLUSTER_NAME="${KIND_CLUSTER_NAME:-}" ko "$@" }
  compdef _ko ko.lima
fi

# Shell theming
export FZF_DEFAULT_OPTS=("$FZF_DEFAULT_OPTS" '--color=bg+:0,pointer:3,marker:5,prompt:4')

# Source local environment
[[ -s ${ZDOTDIR:-${HOME}}/.zlocal ]] && . ${ZDOTDIR:-${HOME}}/.zlocal


# ensure (F)PATH entries remain unique after rc file reload
typeset -U PATH FPATH path fpath

# -----------------
# Utility functions
# -----------------

# Toggle between ssh-agent and gpg-agent (w/ SSH support)
ssh_toggle_agent() {
  local a=ssh-agent
  # see 'man 1 zshexpn' Modifiers section
  [[ $SSH_AUTH_SOCK:t == *.gpg-agent.* ]] && a=gpg-agent

  if [[ $a == ssh-agent ]]; then
    gpg-connect-agent UPDATESTARTUPTTY /bye
    _SSH_AUTH_SOCK=$SSH_AUTH_SOCK
    SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    export SSH_AUTH_SOCK
  else
    SSH_AUTH_SOCK=$_SSH_AUTH_SOCK
    unset _SSH_AUTH_SOCK
    export SSH_AUTH_SOCK
  fi

  local _a=gpg-agent
  [[ $a == gpg-agent ]] && _a=ssh-agent

  print -P "%F{green})%f SSH agent is now: %F{magenta}${_a}%f"
}

# vim: ft=zsh sw=2 ts=2 et
